/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UseFunctionRouteImport } from './routes/use-function'
import { Route as TransitionRouteImport } from './routes/transition'
import { Route as DeferredValueRouteImport } from './routes/deferred-value'
import { Route as ActionRouteImport } from './routes/action'
import { Route as IndexRouteImport } from './routes/index'

const UseFunctionRoute = UseFunctionRouteImport.update({
  id: '/use-function',
  path: '/use-function',
  getParentRoute: () => rootRouteImport,
} as any)
const TransitionRoute = TransitionRouteImport.update({
  id: '/transition',
  path: '/transition',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredValueRoute = DeferredValueRouteImport.update({
  id: '/deferred-value',
  path: '/deferred-value',
  getParentRoute: () => rootRouteImport,
} as any)
const ActionRoute = ActionRouteImport.update({
  id: '/action',
  path: '/action',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/action': typeof ActionRoute
  '/deferred-value': typeof DeferredValueRoute
  '/transition': typeof TransitionRoute
  '/use-function': typeof UseFunctionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/action': typeof ActionRoute
  '/deferred-value': typeof DeferredValueRoute
  '/transition': typeof TransitionRoute
  '/use-function': typeof UseFunctionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/action': typeof ActionRoute
  '/deferred-value': typeof DeferredValueRoute
  '/transition': typeof TransitionRoute
  '/use-function': typeof UseFunctionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/action'
    | '/deferred-value'
    | '/transition'
    | '/use-function'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/action' | '/deferred-value' | '/transition' | '/use-function'
  id:
    | '__root__'
    | '/'
    | '/action'
    | '/deferred-value'
    | '/transition'
    | '/use-function'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActionRoute: typeof ActionRoute
  DeferredValueRoute: typeof DeferredValueRoute
  TransitionRoute: typeof TransitionRoute
  UseFunctionRoute: typeof UseFunctionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/use-function': {
      id: '/use-function'
      path: '/use-function'
      fullPath: '/use-function'
      preLoaderRoute: typeof UseFunctionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transition': {
      id: '/transition'
      path: '/transition'
      fullPath: '/transition'
      preLoaderRoute: typeof TransitionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred-value': {
      id: '/deferred-value'
      path: '/deferred-value'
      fullPath: '/deferred-value'
      preLoaderRoute: typeof DeferredValueRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/action': {
      id: '/action'
      path: '/action'
      fullPath: '/action'
      preLoaderRoute: typeof ActionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActionRoute: ActionRoute,
  DeferredValueRoute: DeferredValueRoute,
  TransitionRoute: TransitionRoute,
  UseFunctionRoute: UseFunctionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
